// Code generated by protoc-gen-go. DO NOT EDIT.
// source: welcome.proto

/*
Package welcome is a generated protocol buffer package.

It is generated from these files:
	welcome.proto

It has these top-level messages:
	FromRequest
	Weather
	ToReply
*/
package welcome

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type FromRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *FromRequest) Reset()                    { *m = FromRequest{} }
func (m *FromRequest) String() string            { return proto.CompactTextString(m) }
func (*FromRequest) ProtoMessage()               {}
func (*FromRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FromRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Weather struct {
	Sourth string `protobuf:"bytes,1,opt,name=sourth" json:"sourth,omitempty"`
	Date   string `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
}

func (m *Weather) Reset()                    { *m = Weather{} }
func (m *Weather) String() string            { return proto.CompactTextString(m) }
func (*Weather) ProtoMessage()               {}
func (*Weather) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Weather) GetSourth() string {
	if m != nil {
		return m.Sourth
	}
	return ""
}

func (m *Weather) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

// The response message containing the greetings
type ToReply struct {
	Messages string   `protobuf:"bytes,1,opt,name=messages" json:"messages,omitempty"`
	We       *Weather `protobuf:"bytes,2,opt,name=we" json:"we,omitempty"`
}

func (m *ToReply) Reset()                    { *m = ToReply{} }
func (m *ToReply) String() string            { return proto.CompactTextString(m) }
func (*ToReply) ProtoMessage()               {}
func (*ToReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ToReply) GetMessages() string {
	if m != nil {
		return m.Messages
	}
	return ""
}

func (m *ToReply) GetWe() *Weather {
	if m != nil {
		return m.We
	}
	return nil
}

func init() {
	proto.RegisterType((*FromRequest)(nil), "welcome.FromRequest")
	proto.RegisterType((*Weather)(nil), "welcome.Weather")
	proto.RegisterType((*ToReply)(nil), "welcome.ToReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Welcome service

type WelcomeClient interface {
	// Sends a greeting
	SayWel(ctx context.Context, in *FromRequest, opts ...grpc.CallOption) (*ToReply, error)
}

type welcomeClient struct {
	cc *grpc.ClientConn
}

func NewWelcomeClient(cc *grpc.ClientConn) WelcomeClient {
	return &welcomeClient{cc}
}

func (c *welcomeClient) SayWel(ctx context.Context, in *FromRequest, opts ...grpc.CallOption) (*ToReply, error) {
	out := new(ToReply)
	err := grpc.Invoke(ctx, "/welcome.Welcome/SayWel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Welcome service

type WelcomeServer interface {
	// Sends a greeting
	SayWel(context.Context, *FromRequest) (*ToReply, error)
}

func RegisterWelcomeServer(s *grpc.Server, srv WelcomeServer) {
	s.RegisterService(&_Welcome_serviceDesc, srv)
}

func _Welcome_SayWel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WelcomeServer).SayWel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/welcome.Welcome/SayWel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WelcomeServer).SayWel(ctx, req.(*FromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Welcome_serviceDesc = grpc.ServiceDesc{
	ServiceName: "welcome.Welcome",
	HandlerType: (*WelcomeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayWel",
			Handler:    _Welcome_SayWel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "welcome.proto",
}

func init() { proto.RegisterFile("welcome.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x6d, 0x91, 0x56, 0x67, 0x15, 0x64, 0x10, 0x59, 0xf6, 0xb4, 0x06, 0x0f, 0x9e, 0x72,
	0xa8, 0x78, 0xf4, 0xb2, 0x07, 0xbd, 0x96, 0x28, 0xf4, 0x1c, 0xeb, 0xd0, 0x0a, 0x89, 0x89, 0x49,
	0x4a, 0xed, 0xbf, 0x97, 0xb4, 0xb1, 0xee, 0x6d, 0xde, 0x30, 0xdf, 0xbc, 0xc7, 0x83, 0xcb, 0x91,
	0x54, 0x6b, 0x34, 0x71, 0xeb, 0x4c, 0x30, 0x58, 0x26, 0xc9, 0x6e, 0x61, 0xf3, 0xec, 0x8c, 0x16,
	0xf4, 0x3d, 0x90, 0x0f, 0x88, 0x70, 0xfa, 0x25, 0x35, 0x6d, 0xb3, 0x7d, 0x76, 0x7f, 0x2e, 0xe6,
	0x99, 0x3d, 0x42, 0xd9, 0x90, 0x0c, 0x3d, 0x39, 0xbc, 0x81, 0xc2, 0x9b, 0xc1, 0x85, 0x3e, 0x1d,
	0x24, 0x15, 0xb1, 0x0f, 0x19, 0x68, 0x9b, 0x2f, 0x58, 0x9c, 0xd9, 0x0b, 0x94, 0x6f, 0x46, 0x90,
	0x55, 0x13, 0xee, 0xe0, 0x4c, 0x93, 0xf7, 0xb2, 0x23, 0x9f, 0xc0, 0x55, 0xe3, 0x1e, 0xf2, 0x71,
	0x01, 0x37, 0xd5, 0x15, 0xff, 0x4b, 0x99, 0x0c, 0x45, 0x3e, 0x52, 0xf5, 0x14, 0xfd, 0xe7, 0x35,
	0x56, 0x50, 0xbc, 0xca, 0xa9, 0x21, 0x85, 0xd7, 0xeb, 0xe9, 0x51, 0xfc, 0xdd, 0xff, 0x83, 0x64,
	0xcd, 0x4e, 0x0e, 0x77, 0x80, 0x9f, 0x86, 0x77, 0xce, 0xb6, 0x9c, 0x7e, 0xa4, 0xb6, 0x8a, 0x3c,
	0xef, 0x0e, 0x17, 0xe9, 0x65, 0x1d, 0xeb, 0xa8, 0xb3, 0xf7, 0x62, 0xee, 0xe5, 0xe1, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xc5, 0xea, 0x6f, 0xe2, 0x28, 0x01, 0x00, 0x00,
}
